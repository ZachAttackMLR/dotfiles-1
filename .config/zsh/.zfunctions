#################
# zsh Functions #
#################

# fzf Integrations {{{

# fo / fos [FUZZY PATTERN] - Open the selected file with $EDITOR / subl
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fo() {
	local files
	IFS=$'\n' files=($(fzf --preview="cat {}" --preview-window=right:70%:wrap --query="$1" --multi --select-1 --exit-0))
	[[ -n "$files" ]] && ${EDITOR} "${files[@]}"
}

function fos() {
	local files
	IFS=$'\n' files=($(fzf --preview="cat {}" --preview-window=right:70%:wrap --query="$1" --multi --select-1 --exit-0))
	[[ -n "$files" ]] && subl "${files[@]}"
}


# fman [FUZZY PATTERN] - Search man pages.
function fman() {
	man -k . | fzf --prompt='Man> ' | awk '{print $1}' | cut -d "(" -f1 | xargs man
}

# fkill - kill processes - list only the ones you can kill. Modified the earlier script.
function fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}

# macOS fuzzy app launcher
function launch() {
	open -a "`find /Applications -name '*app' -maxdepth 1 | cut -d'/' -f 3 | cut -d'.' -f 1 | fzf --query=$1`"
}

# END fzf integrations }}}

# git {{{

# gi [OS,LANGUAGE,ETC]
function gi() {
	curl -sLw "\n" https://www.gitignore.io/api/"$@" ;
}

# Prettier diffs
function pdiff() {
	diff -u $1 $2 | diff-so-fancy
}

# END git }}}

# Dotfiles {{{

# Grab dotfiles list from shallow-backup config and throw it in a fzf selector for editing
function dots() {
	cat ~/.config/shallow-backup.conf | jq '.dotfiles' | jq -r '.[]' | fzf --bind "enter:execute(nvim ~/{})"
}

# backup-dots [COMMIT MESSAGE]
function backup-dots() {
	echo "Backing up..."
	crontab -l > ~/.config/crontab
	(
	shallow-backup -no_splash -dotfiles -separate_dotfiles_repo;
	cd "$HOME/shallow-backup/dotfiles/" || exit
	git add .
	# If no commit message is provided, open vim.
	# Otherwise, commit with the provided message
	commit_msg="$1"
	if [ -z "$commit_msg" ] ; then
		git commit --verbose
	else
		git commit -m "$commit_msg"
	fi
	if [ "$?" -ne 0 ]; then
	    echo "No commit made. Exiting..."
	    exit
	fi
	git pull
	if [ "$?" -ne 0 ]; then
		echo "Merge conflict detected. Fix manually in subshell and Ctrl-D when done."
		git status
		$SHELL
	fi

	git push
	)
}

# Commit current dotfile changes, merge with any remote changes and
# reinstall dotfiles to stay in sync with remote.
function backup-and-update-dots() {
	backup-dots
	shallow-backup -reistall_dots
}

# Source most config files.
function resource() (
    # The outer function definition with () makes this behave like nested python functions. https://stackoverflow.com/a/31316688/8740440
    function _source_files () {
	    for file in "$@"; do
		    if [[ -r "$file" ]] && [[ -f "$file" ]]; then
			    echo "Sourcing $file";
			    source "$file";
		    else
			    echo "Unable to source $file for some reason."
		    fi
	    done
	    unset file
    }

    _source_files $HOME/.{zprofile,secrets}
    _source_files $XDG_CONFIG_HOME/zsh/.{aliases,zshrc,zfunctions}
)

# END Dotfiles }}}

# Ranger {{{

# cd on exit from ranger with Q
function ranger {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map Q chain shell echo %d > "$tempfile"; quitall"
    )

    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}

# END Ranger }}}

# Misc {{{

function cheat() {
	curl cheat.sh/$1
}

function yt-download-audio() {
	youtube-dl -x --audio-format=mp3 $1
}

# https://gist.github.com/emreberge/1424710
function help(){
    bash -c "help $@"
}

# END Misc }}}

# Unix Shortcuts {{{

# tree command with "quick jump" ability
function tre() {
	command tre "$@" -e && source "/tmp/tre_aliases_$USER" 2>/dev/null;
}

# Make a directory and cd into it.
function mk() {
	mkdir "$1" && cd "$1" || exit;
}

# Copy file contents to clipboard.
function copy() {
	OS=$(uname -s)
	if [ "$OS" = "Darwin" ]; then
		pbcopy < "$1"
	elif [ "$OS" = "Linux" ]; then
		xsel -i < "$1"
	fi
}

# END Unix Shortcuts }}}

# tmux {{{

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.

tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# END tmux }}}

# school {{{

cs421-assignment-fetch() {
	git fetch release
	if [ -z $1 ]; then
		echo "No assignment name given."
	else
		git merge release/$1 -m "Merging release repository"
	fi
}

# }}}

# vim: set filetype=zsh foldmethod=marker:
